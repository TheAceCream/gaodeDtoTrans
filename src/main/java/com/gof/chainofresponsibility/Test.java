package com.gof.chainofresponsibility;

/**
 * 责任链模式
 * 使用多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。
 * 将这个对象连城一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
 *
 * ●　　抽象处理者(Handler)角色：定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。
 *      这个角色通常由一个Java抽象类或者Java接口实现。上图中Handler类的聚合关系给出了具体子类对下家的引用，
 *      抽象方法handleRequest()规范了子类处理请求的操作。
 * ●　　具体处理者(ConcreteHandler)角色：具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，
 *      因此，如果需要，具体处理者可以访问下家。
 *
 *  模式的有点就在于实现了解耦，符合开闭原则，在这里面调用者不需要知道具体的传递过程，他只需要知道最终的结果被处理了。而且这个链表的结构可以被灵活的更改重组。
 *  但是它的缺点也是很明显的，首先从性能上说起，一个是调用时间，如果链表在最开始被处理了还好，万一链表跑到了最后一个才被处理，
 *  那么他的调用时间肯定会比不适用责任链模式的效率要低一些；第二是内存的问题，我们会构造出很多的链表节点对象，但是有些对象在我们的应用场景中是不会用到的，
 *  所以大大的消耗了我们的内存；
 *
 *  纯的与不纯的责任链模式
 *　一个纯的责任链模式要求一个具体的处理者对象只能在两个行为中选择一个：一是承担责任，而是把责任推给下家。
 *  不允许出现某一个具体处理者对象在承担了一部分责任后又把责任向下传的情况。
 *　在一个纯的责任链模式里面，一个请求必须被某一个处理者对象所接收；在一个不纯的责任链模式里面，一个请求可以最终不被任何接收端对象所接收。
 *　纯的责任链模式的实际例子很难找到，一般看到的例子均是不纯的责任链模式的实现。有些人认为不纯的责任链根本不是责任链模式，这也许是有道理的。但是在实际的系统里，纯的责任链很难找到。如果坚持责任链不纯便不是责任链模式，那么责任链模式便不会有太大意义了。
 *
 */
public class Test {
    public static void main(String[] args) {
        LeaveHandler lead=new Lead();
        LeaveHandler cto=new CTO();
        LeaveHandler hrBoos=new HrBoss();
        LeaveHandler ceo=new CEO();

        lead.setSuccessor(cto);
        cto.setSuccessor(hrBoos);
        hrBoos.setSuccessor(ceo);

        lead.disposeLeave(8);
    }
}
